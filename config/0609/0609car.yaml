%YAML:1.0

#common parameters
imu_file: "../data/0609d2/imu0.csv"
image_file: "../data/0609d2/time.txt"
image_path: "../data/0609d2/cam0"
gps_file: "..data/0609d2/1hzgps.csv"
output_path: "../data/output"


gps_hz: 1
focal_length: 1620.0

#gps l
gps_l0: 0.05
gps_l1: -0.22
gps_l2: -0.15

# gps_l0: 0.0
# gps_l1: 0.0
# gps_l2: 0.0

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 1280
image_height: 800
distortion_parameters:
   k1: -0.21589549369298233
   k2: 0.28703648609503335
   p1: 0.0017735887168846374
   p2: 0.0006741655039202301
projection_parameters:
   fx: 1619.17214822157
   fy: 1620.1113607622099
   cx: 620.1161752707944
   cy: 434.44419651351575

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.02985213 ,-0.01977713 ,0.99935865,
           0.99951549, 0.00940401 ,-0.02967071, 
           -0.00881118, 0.99976019, 0.02004828]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.09521443,0.07083221, 0.03587649]

#feature traker paprameters
max_cnt: 300            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.05  # max solver itration time (ms), to guarantee real time
max_num_iterations: 10   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 1.2e-02         # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 2.5e-03         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 1.2e-03         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 3.5e-04       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "../data/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
